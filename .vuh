# This is version update helper config.
# It contains specific to current project variables. With use of this file vuh understands how to extract project's
# version and where project's version variable is located. Vuh can't work with any project without this file!
# If .vuh file located in comparing branch is different from local .vuh file vuh will by default take
# configuration files from handling branches (f.e. local .vuh to work with local version and origin/main:.vuh
# to work with origin/main's version). If your project dont have .vuh file in project's root folder vuh will advice
# you to configure that project.
#
# (Version update helper's page: https://github.com/Greewil/version-update-helper)

# This configuration file is based on project-config-templates/shell-versions-template.

# ------------------------------------- begin basic variables ------------------------------------- #

# MAIN_BRANCH_NAME: the name of the main project's branch
# example: 'main' or 'master'
MAIN_BRANCH_NAME='test_fixture_main_check_git_diff'

# VERSION_FILE: file which contains version information (As in current branch so and in origin/MAIN_BRANCH_NAME branch!)
# example: 'package.json' (for node.js application)
VERSION_FILE='version_file.txt'

# TEXT_BEFORE_VERSION_CODE: unique text which will be just before version number (including spaces)
# example: '"version": "' (for variable "version" in json files so it can find line "version": "version_number")
TEXT_BEFORE_VERSION_CODE="VERSION='"

# TEXT_AFTER_VERSION_CODE: unique text which will be just after version number (including spaces)
# example: '",' (for variable "version" in json files so it can find line "version": "version_number")
TEXT_AFTER_VERSION_CODE="'"

# MODULE_ROOT_PATH: root path of the project code directory relative to the repository root.
#   This variable can be used in git diff if IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES equals 'true'.
# example: 'src' (for src directory in the repository root)
MODULE_ROOT_PATH=''

# IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES: if this variable set to 'true' and current branch has no difference
#   with HEAD..origin/MAIN_BRANCH_NAME, vuh will not modify your current version if your current version
#   is the same as main version.
#   If this variable is 'false' (which is by default) vuh will suggest you to increase your current version.
# example: 'true' ('false' by default)
IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES='true'

# <VERSION_PART>_CHANGING_LOCATIONS: if there are changes between HEAD..origin/MAIN_BRANCH_NAME and
#   current branch in this files or directories, <VERSION_PART> version should be increased. Works only if you
#   checking git diff (you configured your .vuh config such way or you using --check-git-diff parameter).
#   Locations should be separated with spaces.
#   Empty variable means there is no locations which leads to <VERSION_PART> increasing on every change in them.
# example: 'openapi/schema.yaml very/important/directory' (for 'openapi/schema.yaml' and 'very/important/directory')
MINOR_CHANGING_LOCATIONS='dir_leading_to_minor_updates'
MAJOR_CHANGING_LOCATIONS=''

# You can override get_larger_prerelease_info function here. Here's a template for it:
#
# $1 - Prerelease information of the first version to compare
# $2 - Prerelease information of the second version to compare
#
# Returns larger prerelease version or '=' if inputs are treated as equal.
#function get_larger_prerelease_info() {
#  <Your comparing logic>
#}

# ------------------------------------- end basic variables ------------------------------------- #

