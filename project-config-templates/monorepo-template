# This is version update helper config.
# It contains specific to current project variables. With use of this file vuh understands how to extract project's
# version and where project's version variable is located. Vuh can't work with any project without this file!
# If .vuh file located in comparing branch is different from local .vuh file vuh will by default take
# configuration files from handling branches (f.e. local .vuh to work with local version and origin/main:.vuh
# to work with origin/main's version). If your project dont have .vuh file in project's root folder vuh will advice
# you to configure that project.
#
# (Version update helper's page: https://github.com/Greewil/version-update-helper)

# This configuration file is based on project-config-templates/monorepo-template.

# ------------------------------------- begin basic variables ------------------------------------- #

# MAIN_BRANCH_NAME: the name of the main project's branch
# example: 'main' or 'master'
MAIN_BRANCH_NAME='main'

# VERSION_FILE: file which contains version information (As in current branch so and in origin/MAIN_BRANCH_NAME branch!)
# example: 'package.json' (for node.js application)
VERSION_FILE='api/build.gradle.kts'

# TEXT_BEFORE_VERSION_CODE: unique text which will be just before version number (including spaces)
# example: '"version": "' (for variable "version" in json files so it can find line "version": "version_number")
TEXT_BEFORE_VERSION_CODE='version = "'

# TEXT_AFTER_VERSION_CODE: unique text which will be just after version number (including spaces)
# example: '",' (for variable "version" in json files so it can find line "version": "version_number")
TEXT_AFTER_VERSION_CODE='"'

# MODULE_ROOT_PATH: root path of the project code directory relative to the repository root.
#   This variable can be used in git diff if IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES equals 'true'.
# example: 'src' (for src directory in the repository root)
MODULE_ROOT_PATH=''

# IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES: if this variable set to 'true' and current branch has no difference
#   with HEAD..origin/MAIN_BRANCH_NAME, vuh will not modify your current version if your current version
#   is the same as main version.
#   If this variable is 'false' (which is by default) vuh will suggest you to increase your current version.
# example: 'true' ('false' by default)
IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES='true'

# This function calls after each successful version update.
# This realisation will generate new package-lock.json file after changing package.json.
#
# $1 - Version before update
# $2 - New version after update
function after_successful_version_update() {
  old_version=$1
  new_version=$2
  if [ "$SPECIFIED_PROJECT_MODULE" = 'WEB' ]; then
    cd "$ROOT_REPO_DIR/$MODULE_ROOT_PATH"
    npm i --package-lock-only
    # to update package-lock.json after updating package.json
    cd -
  fi
}

# ------------------------------------- end basic variables ------------------------------------- #

# ------------------------------------- begin mono repository variables ------------------------------------- #

# PROJECT_MODULES: list of all modules in your mono repository that will have different versioning mechanisms.
#   You can leave this variable empty if your repository contains only one project.
#   For each specified module you should specify configuration for this module down below.
#   For each module you should specify: MAIN_BRANCH_NAME, VERSION_FILE, TEXT_BEFORE_VERSION_CODE,
#   TEXT_AFTER_VERSION_CODE, MODULE_ROOT_PATH (relative to the repository root).
#   Configuration variable for module should looks like: <MODULE_NAME>_<VARIABLE_NAME>.
# example: 'UI,API' (for mono repository with two modules: UI and API)
#   Also you can see example here: https://github.com/Greewil/version-update-helper/blob/main/.vuh
PROJECT_MODULES='API, WEB'

# variables for API module
API_VERSION_FILE='api/build.gradle.kts'
API_TEXT_BEFORE_VERSION_CODE='version = "'
API_TEXT_AFTER_VERSION_CODE='"'
API_MODULE_ROOT_PATH="api"
API_IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES='false'

# variables for WEB module
WEB_VERSION_FILE='web/package.json'
WEB_TEXT_BEFORE_VERSION_CODE='"version": "'
WEB_TEXT_AFTER_VERSION_CODE='",'
WEB_MODULE_ROOT_PATH="web"
WEB_IS_INCREMENT_REQUIRED_ONLY_ON_CHANGES='false'

# ------------------------------------- end mono repository variables ------------------------------------- #
